service: dsconstruction-photos

plugins:
  - serverless-python-requirements

custom:
  s3:
    bucketNames:
      staging: dsc-photos-staging-${self:provider.stage}
      public: dsc-photos-${self:provider.stage}
  pythonRequirements:
    dockerizePip: non-linux
    pythonBin: python

provider:
  name: aws
  runtime: python3.8
  region: ca-central-1
  stage: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::${self:custom.s3.bucketNames.public}
        - arn:aws:s3:::${self:custom.s3.bucketNames.public}/*
        - arn:aws:s3:::${self:custom.s3.bucketNames.staging}
        - arn:aws:s3:::${self:custom.s3.bucketNames.staging}/*
  environment:
    DSC_STAGING_BUCKET_NAME: ${self:custom.s3.bucketNames.staging}
    DSC_PUBLIC_BUCKET_NAME: ${self:custom.s3.bucketNames.public}

functions:
  optimize:
    handler: handler.optimize
    events:
      - s3:
          bucket: staging
          event: s3:ObjectCreated:*
          rules:
            - prefix: gallery/

resources:
  Resources:
    S3BucketStaging:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.bucketNames.staging}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
                - "PUT"
                - "DELETE"
    S3BucketPhotos:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.bucketNames.public}
    OptimizeLambdaPermissionPhotosS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - OptimizeLambdaFunction
            - Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.s3.bucketNames.staging}"
  Outputs:
    StagingBucketName:
      Value: ${self:custom.s3.bucketNames.staging}
    PublicBucketName:
      Value: ${self:custom.s3.bucketNames.public}
