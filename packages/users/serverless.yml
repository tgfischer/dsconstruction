service: dsconstruction-users

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    port: 3002
  webpack:
    includeModules: true
    packager: "yarn"
    individually: true
  cognito:
    userPool:
      name: dsc-user-pool-${self:provider.stage}
    client:
      name: dsc-user-pool-client-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: ca-central-1
  stage: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminRespondToAuthChallenge
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminCreateUser
        - cognito-idp:ListUsers
        - cognito-idp:AdminDeleteUser
      Resource:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
  environment:
    COGNITO_USER_POOL_ID:
      Ref: CognitoUserPool
    COGNITO_USER_POOL_CLIENT_ID:
      Ref: CognitoUserPoolClient
    COGNITO_USER_POOL_REGION: ${self:provider.region}

functions:
  login:
    handler: src/index.handler
    events:
      - http:
          path: /api/login
          method: POST
          cors: true
  resetTemporaryPassword:
    handler: src/index.handler
    events:
      - http:
          path: /api/reset/temporary
          method: POST
          cors: true
  getUsers:
    handler: src/index.handler
    events:
      - http:
          path: /api/users
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addUser:
    handler: src/index.handler
    events:
      - http:
          path: /api/users
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  deleteUsers:
    handler: src/index.handler
    events:
      - http:
          path: /api/users
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognito.userPool.name}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.cognito.client.name}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    UserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
