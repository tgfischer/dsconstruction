service: dsconstruction-backend

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    port: 3001
  webpack:
    includeModules: true
    packager: "npm"
    individually: true
  s3:
    photosBucketName: ${cf:dsconstruction-photos-${self:provider.stage}.PublicBucketName}
    bucketName: ${cf:dsconstruction-photos-${self:provider.stage}.StagingBucketName}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, "ca-central-1"}
  stage: ${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource: arn:aws:dynamodb:ca-central-1:*:table/DSC*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::${self:custom.s3.bucketName}
        - arn:aws:s3:::${self:custom.s3.bucketName}/*
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    DSC_PHOTOS_BUCKET_NAME: ${self:custom.s3.photosBucketName}
    DSC_BUCKET_NAME: ${self:custom.s3.bucketName}

functions:
  getHome:
    handler: src/index.handler
    events:
      - http:
          path: /api/home
          method: GET
          cors: true
  editHome:
    handler: src/index.handler
    events:
      - http:
          path: /api/home
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getServices:
    handler: src/index.handler
    events:
      - http:
          path: /api/services
          method: GET
          cors: true
  destroyServices:
    handler: src/index.handler
    events:
      - http:
          path: /api/services
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addService:
    handler: src/index.handler
    events:
      - http:
          path: /api/services
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getGalleryPhotos:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery
          method: GET
          cors: true
  destroyGalleryPhotos:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getSignedUrl:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery/url
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addGalleryPhoto:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery
          method: PUT
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  toggleTags:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery/toggle
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getTags:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery/tags
          method: GET
          cors: true
  destroyTag:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery/tags
          method: DELETE
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  addTag:
    handler: src/index.handler
    events:
      - http:
          path: /api/gallery/tags
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getContactInfo:
    handler: src/index.handler
    events:
      - http:
          path: /api/contact
          method: GET
          cors: true
  sendEmail:
    handler: src/index.handler
    events:
      - http:
          path: /api/contact
          method: POST
          cors: true
  editPhoneNumbers:
    handler: src/index.handler
    events:
      - http:
          path: /api/contact/phone_numbers
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  editContactInfo:
    handler: src/index.handler
    events:
      - http:
          path: /api/contact/contact
          method: POST
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - ${cf:dsconstruction-users-${self:provider.stage}.UserPoolArn}
  Outputs:
    RecaptchaClientKey:
      Value: ${env:DSC_RECAPTCHA_KEY}
